@model TodoWebApp.Models.Todo

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/_LayoutPage1.cshtml";
}

<h2>Edit</h2>


@* Html.BeginForm()メソッド: ブロック内をformタグで囲む。入力フォームを生成している。 *@
@using (Html.BeginForm())
{
    // Html.AntiForgeryToken()メソッド:
    // フォームの送信時に検証される隠しフォーム フィールド (偽造防止トークン) を生成。
    // クロスサイトリクエストフォージェリ(CSRF)対策のhiddenタグを埋め込む。
    // 対応するコントローラーのPOSTアクションメソッドにもValidateAntiForgeryToken属性を設定すること。
    // [クロスサイトリクエストフォージェリ(CSRF)について]
    //   掲示板や問い合わせフォーム等を処理するWebアプリが本来拒否すべき他サイトからのリクエストを受信し処理してしまう脆弱性。
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Todo</h4>
    <hr />
    @* Html.ValidationSummaryメソッド: 入力チェックのエラーメッセージが出力される。 *@
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @* Html.HiddenForメソッド: hiddenタグを生成。ここではTodoモデルクラスのIdプロパティを保持。 *@
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        @* Html.LabelForメソッド: POCOのプロパティ名(DisplayName属性値)を表示するlabelタグを生成。DisplayNameForメソッドと似ているが、内容がlabelタグで囲まれる点が異なる。HTML属性を設定できる。 *@
        @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*
                Html.EditorForメソッド: 指定のプロパティの型に応じたタグを生成。
                string型ならテキストボックス、bool型ならチェックボックスが生成される。DateTime型なら入力文字が日付かどうかのチェックが自動実装される。
                Todoモデルクラスにデータアノテーション(注釈)を設定(プロパティへの属性で設定)することで、細かな入力チェックを実装できる。
            *@
            @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
            @* Html.ValidationMessageForメソッド: 各項目の入力チェックのエラーメッセージを含むspan要素を出力。 *@
            @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Detail, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Detail, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Detail, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Limit, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Limit, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Limit, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Done, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.Done)
                @Html.ValidationMessageFor(model => model.Done, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@* jqueryとvalidateプラグインの読み込み。これらは入力チェックで使用されている。 *@
<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
